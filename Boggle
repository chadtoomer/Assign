/**
 * Given a Boggle board and a dictionary, returns a list of available words in
 * the dictionary present inside of the Boggle board.
 * @param {string[][]} grid - The Boggle game board.
 * @param {string[]} dictionary - The list of available words.
 * @returns {string[]} solutions - Possible solutions to the Boggle board.
 */
 exports.findAllSolutions = function(grid, dictionary) {
  if (dictionary.length == 0){
     return []
   }
   //convert all to lowercase
   for(let x = 0; x < grid.length; x++){
     for(let y = 0; y < grid[i].length; y++){
       grid[x][y] = grid[x][y].toLowerCase();
     }
   }
   for(let x = 0; x < dictionary.length; x++){
       dictionary[x] = dictionary[x].toLowerCase();
   }
   if (grid.length == 0 || dictionary.length == 0) {
      return false;
    }
    var answer = false;

    function boggle(x,y, word_length, grid, word) {
        if (word_length == (word.length - 1)) {
            answer = true
        }
        if (word_length == 0) {
            answer = false
        }
        letter = word[word_length+1]
        // One move
        if (y < grid.length - 1 && word_length < word.length-1) {
          if (grid[x][y+1] == letter) {
            console.log(word)
              boggle(x,y+1, word_length+1, grid, word)
           }
        }
        if (x < grid.length - 1 && index < word.length-1) {
           if (grid[x+1][y] == letter) {
             boggle(x+1,y, word_length+1, grid, word)
           }
        }
        if (y > 0 && word_length < word.length-1) {
           if (grid[x][y-1] == letter) {
             boggle(x,y-1, word_length+1, grid, word)
           }
        }
        if (x > 0 && word_length < word.length-1) {
           if (grid[x-1][y] == letter) {
             boggle(x-1,y, word_length+1, grid, word)
           }
        }
        if (answer === true) {return true}
        else{return false}
    }

    function solver(grid, word) {
        let word_length = 0;
        for(let a = 0; a < grid.length; a++){
          if (grid[a].includes(word[0])) {
            for(let b = 0; b < grid[a].length; b++){             
               if (grid[a][b] == word[0]){
                 if boggle(a,b, word_length, grid, word) == true {     
                  return true;
                 }
                word_length = 0;
                continue;
               }
            }
          }
          if (word.includes("qu") || word.includes("st")){
              if (grid[a].includes(word.slice(0,2))) {
                for(let b = 0; b < grid[a].length; b++){             
                  if (grid[a][b] == word.slice(0,2)){
                    if boggle(a,b, word_length+1, grid, word) == true) { 
                      return true;
                 }
                word_length = 0;
                continue;
               }
            }
          }
      return false;
    }
   
    var result = [];
    for(let word in dictionary){
      if(solver(grid, dictionary[word]) == true){
        result.push(dictionary[word]);
      }
    }    
    return result;
}


const grid = [['T', 'W', 'Y', 'R'],
              ['E', 'N', 'P', 'H'],
              ['G', 'Z', 'Qu', 'R'],
              ['O', 'N', 'T', 'A']];
const dictionary = ['art', 'ego', 'gent', 'get', 'net', 'new', 'newt', 'prat',
                    'pry', 'qua', 'quart', 'quartz', 'rat', 'tar', 'tarp',
                    'ten', 'went', 'wet', 'arty', 'egg', 'not', 'quar'];

console.log(exports.findAllSolutions(grid, dictionary));
